
# Archivos compilados por bytes / optimizados / DLL
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class


# Extensiones C
# C extensions
*.so


# Distribución / embalaje
# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST




# PyInstaller
# Por lo general, estos archivos están escritos por un script de python a partir de una plantilla
# antes de que PyInstaller construya el exe, para inyectarle fecha/otra información.

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec


# Registros del instalador
# Installer logs
pip-log.txt
pip-delete-this-directory.txt







# Pruebas unitarias / informes de cobertura
# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/



# Traducciones
# Translations
*.mo
*.pot


# Cosas de Django:
# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal


# Cosas de Flask
# Flask stuff:
instance/
.webassets-cache

# SCosas Scrapy
.scrapy


# documentación de Sphinx
# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py




#pyenv
# Para una biblioteca o paquete, es posible que desee ignorar estos archivos ya que el código es
# destinado a ejecutarse en múltiples entornos; de lo contrario, consúltalos en:
# .python-version

# pipenv
# De acuerdo con pypa/pipenv#598, se recomienda incluir Pipfile.lock en el control de versiones.
# Sin embargo, en caso de colaboración, si tiene dependencias específicas de la plataforma o dependencias
# al no tener soporte multiplataforma, pipenv puede instalar dependencias que no funcionan, o no
# instalar todas las dependencias necesarias.
#Pipfile.lock

# poetry
# Similar a Pipfile.lock, generalmente se recomienda incluir poetic.lock en el control de versiones.
# Esto se recomienda especialmente para paquetes binarios para garantizar la reproducibilidad, y es más
# comúnmente ignorado por las bibliotecas.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

#pm
# Similar a Pipfile.lock, generalmente se recomienda incluir pdm.lock en el control de versiones.
#pdm.lock
# pdm almacena configuraciones de todo el proyecto en .pdm.toml, pero se recomienda no incluirlo
# en el control de versiones.
#   https://pdm.fming.dev/#use-with-ide








# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/


# Cosas de celery
# Celery stuff
celerybeat-schedule
celerybeat.pid


# SageMath analiza archivos
# SageMath parsed files
*.sage.py


# Entornos
# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/


# Configuracion proyectos Spider
# Spyder project settings
.spyderproject
.spyproject


# Configuracion de proyectos rope
# Rope project settings

.ropeproject

# documentacion mkdocs
# mkdocs documentation
/site



# mypy
.mypy_cache/
.dmypy.json
dmypy.json


# verificador de tipo pyre
# Pyre type checker
.pyre/

# analizador de tipo estático pytype
# pytype static type analyzer
.pytype/



# Símbolos de depuración de Cython
# Cython debug symbols
cython_debug/






#PyCharm
# La plantilla específica de JetBrains se mantiene en un JetBrains.gitignore separado que puede
# se encuentra en https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
# y se puede agregar al gitignore global o fusionarse en este archivo. Por una más nuclear
# opción (no recomendada) puede descomentar lo siguiente para ignorar toda la carpeta de ideas.
#.idea/


# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/